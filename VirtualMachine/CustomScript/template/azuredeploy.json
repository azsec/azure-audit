{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Administrator username of the virtual machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password of the virtual machine"
      }
    },
    "osPlatform": {
      "type": "string",
      "allowedValues": ["Windows", "RedHat"],
      "metadata": {
        "description": "The OS type of the virtual machine"
      }
    },
    "windowsOsSku": {
      "type": "string",
      "allowedValues": ["2016-datacenter-gensecond", "2019-Datacenter"],
      "metadata": {
        "description": "The SKU of Windows OS"
      }
    },
    "rhelOsSku": {
      "type": "string",
      "defaultValue": "7.8",
      "metadata": {
        "description": "The CentOs version for the VM. This will pick a fully patched image of this given CentOs version."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A4_v2",
      "metadata": {
        "description": "Size of the virtual machine."
      }
    },
    "subnetId": {
      "type": "string",
      "metadata": {
        "description": "Subnet where the virtual machine belongs to"
      }
    },
    "secretKey": {
      "type": "securestring",
      "metadata": {
        "description": "This is a secret that is passed to the script"
      }
    },
    "licenseKey": {
      "type": "securestring",
      "metadata": {
        "description": "This is a secret that is passed to the script"
      }
    },
    "scriptStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The storage account where script is stored."
      }
    },
    "scriptStorageAccountContainerName": {
      "type": "string",
      "metadata": {
        "description": "The storage account container where script is stored."
      }
    },
    "userManagedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "The user-assigned managed identity for the VM to download script from a given storage account. It must have Storage Blob Data Reader in the storage account where script is located."
      }
    },
    "monitoringWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the the Log Analytics Workspace to where virtual machine log will be sent to. "
      }
    }
  },
  "variables": {
    "vmName": "[tolower(concat(parameters('vmName'),'-',parameters('osPlatform'),'-vm'))]",
    "nicName": "[concat(variables('vmName'), '-nic')]",
    "bootstrapScriptName": "[if(equals(parameters('osPlatform'),'Windows'),'script.ps1','script.sh')]",
    "bootstrapScriptUrl": "[concat('https://',parameters('scriptStorageAccountName'),'.blob.core.windows.net/',parameters('scriptStorageAccountContainerName'),'/',variables('bootstrapScriptName'))]",
    "windowsImageReference": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOsSku')]",
      "version": "latest"
    },
    "linuxImageReference": {
      "publisher": "RedHat",
      "offer": "RHEL",
      "sku": "[parameters('rhelOsSku')]",
      "version": "latest"
    },
    "windowsImageConfiguration": "[if(equals(parameters('osPlatform'),'Windows'),variables('windowsImageReference'),json('null'))]",
    "linuxImageConfiguration": "[if(equals(parameters('osPlatform'),'RedHat'),variables('linuxImageReference'),json('null'))]",
    "windowsOsProfile": {
      "computerName": "[parameters('vmName')]",
      "adminUsername": "[parameters('adminUserName')]",
      "adminPassword": "[parameters('adminPassword')]"
    },
    "linuxOsProfile": {
      "computerName": "[parameters('vmName')]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-11-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('subnetId')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-10-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('userManagedIdentityResourceId')]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": "[if(equals(parameters('osPlatform'),'Windows'),variables('windowsOsProfile'),variables('linuxOsProfile'))]",
        "storageProfile": {
          "imageReference": "[if(equals(parameters('osPlatform'),'Windows'),variables('windowsImageConfiguration'), variables('linuxImageConfiguration'))]",
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 1023,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "comments": "Deploy a Log Analytics agent on a Windows VM to send log to CES Log Analytics Workspace",
      "condition": "[equals(parameters('osPlatform'), 'Windows')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "name": "[concat(variables('vmName'),'/Microsoft.EnterpriseCloud.Monitoring.MicrosoftMonitoringAgent')]",
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[reference(parameters('monitoringWorkspaceResourceId'),'2020-03-01-preview').customerId]"
        },
        "protectedSettings": {
          "workspaceKey": "[listKeys(parameters('monitoringWorkspaceResourceId'),'2020-03-01-preview').primarySharedKey]"
        }
      }
    },
    {
      "comments": "Deploy a Log Analytics agent on a Linux VM to send log to CES Log Analytics Workspace",
      "condition": "[equals(parameters('osPlatform'), 'RedHat')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "name": "[concat(variables('vmName'),'/Microsoft.EnterpriseCloud.Monitoring.OmsAgentForLinux')]",
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "OmsAgentForLinux",
        "typeHandlerVersion": "1.13",
        "autoUpgradeMinorVersion": false,
        "settings": {
          "workspaceId": "[reference(parameters('monitoringWorkspaceResourceId'),'2020-03-01-preview').customerId]",
          "stopOnMultipleConnections": true
        },
        "protectedSettings": {
          "workspaceKey": "[listKeys(parameters('monitoringWorkspaceResourceId'),'2020-03-01-preview').primarySharedKey]"
        }
      }
    },
    {
      "comments": "Execute bootstrap script with Custom Script Extension",
      "condition": "[equals(parameters('osPlatform'), 'Windows')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-03-01",
      "location": "[parameters('location')]",
      "name": "[concat(variables('vmName'),'/CSEWindows')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), 'Microsoft.EnterpriseCloud.Monitoring.MicrosoftMonitoringAgent')]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": ["[variables('bootstrapScriptUrl')]"],
          "managedIdentity": {
            "objectId": "[reference(parameters('userManagedIdentityResourceId'),'2015-08-31-PREVIEW').principalId]"
          },
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File script.ps1 ', '-License ',  '\"', parameters('licenseKey'), '\"', '', '-secret ', parameters('secretKey'), '\"')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[equals(parameters('osPlatform'),'RedHat')]",
      "apiVersion": "2021-03-01",
      "location": "[parameters('location')]",
      "name": "[concat(variables('vmName'),'/CSELinux')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": ["[variables('bootstrapScriptUrl')]"],
          "managedIdentity": {
            "objectId": "[reference(parameters('userManagedIdentityResourceId'),'2015-08-31-PREVIEW').principalId]"
          },
          "commandToExecute": "[concat('sh script.sh -l ', parameters('licenseKey'), ' -s ', '\"', parameters('secretKey'), '\"')]"
        }
      }
    }
  ],
  "outputs": {
      "resourceId": {
          "type": "string",
          "value": "[resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))]"
      }
  }
}